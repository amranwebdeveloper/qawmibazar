<?php

namespace Modules\Property\Admin;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\AdminController;
use Modules\Core\Models\Attributes;
use Modules\Property\Models\PropertyDokan;
use Modules\Property\Models\PropertyDokanTerm;
use Modules\Property\Models\PropertyDokanTranslation;
use Modules\Property\Models\PropertyDokanProduct;
use Modules\Property\Models\PropertyDokanProductTerm;
use Modules\Property\Models\PropertyDokanProductTranslation;
use Modules\Location\Models\Location;
use Modules\Property\Models\Property;
use Modules\Property\Models\PropertyTerm;
use Modules\Property\Models\PropertyTranslation;
use Modules\Location\Models\LocationCategory;
use Modules\Property\Models\PropertyDokanProductCategory;

class ProductController extends AdminController
{
    protected $propertyClass;
    protected $dokanTermClass;
    protected $productTermClass;
    protected $attributesClass;
    protected $location;
    protected $propertyProductCategoryClass;
    /**
     * @var PropertyDokan
     */
    protected $dokanClass;
    protected $productClass;
    protected $currentProperty;
    protected $currentDokan;
    protected $dokanTranslationClass;
    protected $productTranslationClass;

    public function __construct()
    {
        parent::__construct();
        $this->setActiveMenu(route('property.admin.index'));
        $this->propertyClass = Property::class;
        $this->dokanTermClass = PropertyDokanTerm::class;
        $this->productTermClass = PropertyDokanProductTerm::class;
        $this->attributesClass = Attributes::class;
        $this->location = Location::class;
        $this->propertyProductCategoryClass = PropertyDokanProductCategory::class;
        $this->dokanClass = PropertyDokan::class;
        $this->productClass = PropertyDokanProduct::class;
        $this->dokanTranslationClass = PropertyDokanTranslation::class;
        $this->productTranslationClass = PropertyDokanProductTranslation::class;
        $this->locationCategoryClass = LocationCategory::class;
    }
    public function callAction($method, $parameters)
    {
        if (!Property::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    protected function hasPropertyPermission($dokan_id = false)
    {
        if (empty($dokan_id)) return false;

        $dokan = $this->dokanClass::find($dokan_id);
        if (empty($dokan)) return false;

        if (!$this->hasPermission('property_manage_others') and $dokan->create_user != Auth::id()) {
            return false;
        }

        $this->currentDokan = $dokan;
        return true;
    }
    public function index(Request $request, $dokan_id)
    {
        $this->checkPermission('property_view');

        if (!$this->hasPropertyPermission($dokan_id)) {
            abort(403);
        }

        $query = $this->productClass::query();

        $query->orderBy('id', 'desc');
        if (!empty($property_name = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $property_name . '%');
            $query->orderBy('title', 'asc');
        }

        $query->where('parent_id', $dokan_id);
        $data = [
            'rows'               => $query->with(['author'])->paginate(20),
            'property_manage_others' => $this->hasPermission('property_manage_others'),
            'breadcrumbs'        => [
                [
                    'name' => __('Properties'),
                    'url'  => route('property.admin.index')
                ],
                [
                    'name' => __('Property: :name', ['name' => $this->currentDokan->title]),
                    'url'  => route('property.admin.edit', ['id' => $this->currentDokan->id])
                ],
                [
                    'name'  => __('Product Management'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Product Management"),
            'dokan' => $this->currentDokan,
            'row' => new $this->productClass(),
            'product_category'    => $this->propertyProductCategoryClass::where('status', 'publish')->get()->toTree(),
            'translation' => new $this->productTranslationClass(),
            'property_location' => $this->location::where('status', 'publish')->get(),
            'location_category' => $this->locationCategoryClass::where('status', 'publish')->get(),
            'attributes'     => $this->attributesClass::where('service', 'product')->get(),
        ];
        return view('Property::admin.product.index', $data);
    }

    public function edit(Request $request, $dokan_id, $id)
    {
        $this->checkPermission('property_update');

        if (!$this->hasPropertyPermission($dokan_id)) {
            abort(403);
        }

        $row = $this->productClass::find($id);
        if (empty($row) or $row->parent_id != $dokan_id) {
            return redirect(route('property.admin.product.index', ['dokan_id' => $dokan_id]));
        }

        $translation = $row->translateOrOrigin($request->query('lang'));
        if (!$this->hasPermission('property_manage_others')) {
            if ($row->create_user != Auth::id()) {
                return redirect(route('property.admin.product.index'));
            }
        }
        $data = [
            'row'            => $row,
            'product_category'    => $this->propertyProductCategoryClass::where('status', 'publish')->get()->toTree(),
            'translation'    => $translation,
            'property_location' => $this->location::where('status', 'publish')->get(),
            'location_category' => $this->locationCategoryClass::where('status', 'publish')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'attributes'     => $this->attributesClass::where('service', 'product')->get(),
            'enable_multi_lang' => true,
            'breadcrumbs'    => [
                [
                    'name' => __('Properties'),
                    'url'  => route('property.admin.index')
                ],
                [
                    'name' => __('Property: :name', ['name' => $this->currentDokan->title]),
                    'url'  => route('property.admin.edit', ['id' => $this->currentDokan->id])
                ],
                [
                    'name' => __('All Dokans'),
                    'url'  => route('property.admin.product.index', ['dokan_id' => $this->currentDokan->id])
                ],
                [
                    'name' => __('Edit Product: :name', ['name' => $row->title]),
                ],
            ],
            'page_title' => __("Edit: :name", ['name' => $row->title]),
            'dokan' => $this->currentDokan
        ];
        return view('Property::admin.product.detail', $data);
    }

    public function store(Request $request, $dokan_id, $id)
    {

        if (!$this->hasPropertyPermission($dokan_id)) {
            abort(403);
        }
        if ($id > 0) {
            $this->checkPermission('property_update');
            $row = $this->productClass::find($id);
            if (empty($row)) {
                return redirect(route('property.admin.index'));
            }

            if ($row->create_user != Auth::id() and !$this->hasPermission('property_manage_others')) {
                return redirect(route('property.admin.product.index'));
            }

            if ($row->parent_id != $dokan_id) {
                return redirect(route('property.admin.product.index'));
            }
        } else {
            $this->checkPermission('property_create');
            $row = new $this->productClass();
            $row->status = "publish";
        }
        $dataKeys = [
            'title',
            'slug',
            'content',
            'business_type',
            'image_id',
            'banner_image_id',
            'measurement_chart',
            'pdf',
            'video',
            'gallery',
            'category_id',
            'is_featured',
            'view',
            'review_score',
            'short_description',
            'specification',
            'tags',
            'price',
            'sale_price',
            'purchase_price',
            'discount',
            'discount_type',
            'discount_start_date',
            'discount_end_date',
            'tax',
            'tax_type',
            'shipping_type',
            'shipping_cost',
            'status',
            'barcode',
            'digital',
        ];

        $row->fillByAttr($dataKeys, $request->input());

        $row->digital = 0;
        if ($id < 0) {
            $row->parent_id = $dokan_id;
        }

        $res = $row->saveOriginOrTranslation($request->input('lang'), true);

        if ($res) {
            if (!$request->input('lang') or is_default_lang($request->input('lang'))) {
                $this->saveTerms($row, $request);
            }

            if ($id > 0) {
                return redirect()->back()->with('success',  __('Product updated'));
            } else {
                return redirect()->back()->with('success',  __('Product created'));
            }
        }
    }

    public function saveTerms($row, $request)
    {
        $this->checkPermission('property_manage_attributes');
        if (empty($request->input('terms'))) {
            $this->productTermClass::where('target_id', $row->id)->delete();
        } else {
            $term_ids = $request->input('terms');
            foreach ($term_ids as $term_id) {
                $this->productTermClass::firstOrCreate([
                    'term_id' => $term_id,
                    'target_id' => $row->id
                ]);
            }
            $this->productTermClass::where('target_id', $row->id)->whereNotIn('term_id', $term_ids)->delete();
        }
    }

    public function bulkEdit(Request $request)
    {
        $ids = $request->input('ids');
        $action = $request->input('action');
        if (empty($ids) or !is_array($ids)) {
            return redirect()->back()->with('error', __('No items selected!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }
        switch ($action) {
            case "delete":
                foreach ($ids as $id) {
                    $query = $this->productClass::where("id", $id);
                    $query->first();
                    if (!empty($query)) {
                        $query->delete();
                    }
                }
                return redirect()->back()->with('success', __('Deleted success!'));
                break;
            case "clone":
                $this->checkPermission('property_create');
                foreach ($ids as $id) {
                    (new $this->productClass())->saveCloneByID($id);
                }
                return redirect()->back()->with('success', __('Clone success!'));
                break;
            default:
                // Change status
                foreach ($ids as $id) {
                    $query = $this->productClass::where("id", $id);
                    if (!$this->hasPermission('property_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('property_update');
                    }
                    $query->update(['status' => $action]);
                }
                return redirect()->back()->with('success', __('Update success!'));
                break;
        }
    }
}
